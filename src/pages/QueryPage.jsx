import React, { useState, useEffect } from 'react';
import { 
  Container, 
  Box, 
  Typography, 
  TextField, 
  Button, 
  Paper, 
  Grid, 
  CircularProgress,
  Tab,
  Tabs,
  Divider,
  Chip,
  IconButton,
  Tooltip
} from '@mui/material';
import SendIcon from '@mui/icons-material/Send';
import CodeIcon from '@mui/icons-material/Code';
import StorageIcon from '@mui/icons-material/Storage';
import BuildIcon from '@mui/icons-material/Build';
import LanguageIcon from '@mui/icons-material/Language';
import HelpOutlineIcon from '@mui/icons-material/HelpOutline';
import { Prism as SyntaxHighlighter } from 'react-syntax-highlighter';
import { materialDark } from 'react-syntax-highlighter/dist/esm/styles/prism';
import axios from 'axios';
import { getAuthToken } from '../utils/auth';
import ConnectionSelector from '../components/ConnectionSelector';
import QueryBuilder from '../components/QueryBuilder';
import { showSuccess, showError } from '../../lib/toast';

// TabPanel component for the tab content
function TabPanel(props) {
  const { children, value, index, ...other } = props;

  return (
    <div
      role="tabpanel"
      hidden={value !== index}
      id={`query-tabpanel-${index}`}
      aria-labelledby={`query-tab-${index}`}
      {...other}
    >
      {value === index && (
        <Box sx={{ p: 3 }}>
          {children}
        </Box>
      )}
    </div>
  );
}

const QueryPage = () => {
  // States for query input and results
  const [queryText, setQueryText] = useState('');
  const [selectedConnection, setSelectedConnection] = useState(null);
  const [results, setResults] = useState({
    sql: '',
    data: [],
    error: '',
    loading: false
  });

  // State for the current tab
  const [currentTab, setCurrentTab] = useState(0);

  const handleTabChange = (event, newValue) => {
    setCurrentTab(newValue);
  };

  const handleConnectionChange = (connectionId) => {
    setSelectedConnection(connectionId);
    // Clear previous results when connection changes
    setResults({
      sql: '',
      data: [],
      error: '',
      loading: false
    });
  };

  const handleQuerySubmit = async (e) => {
    e.preventDefault();
    
    // Validate input
    if (!queryText.trim()) {
      setResults({
        ...results,
        error: 'Please enter a query',
        loading: false
      });
      return;
    }
    
    if (!selectedConnection) {
      setResults({
        ...results,
        error: 'Please select a database connection',
        loading: false
      });
      return;
    }
    
    // Show loading state
    setResults({
      ...results,
      loading: true,
      error: ''
    });
    
    try {
      // Send the natural language query to the backend
      const response = await axios.post('/api/queries/natural-language', {
        query_text: queryText,
        connection_id: selectedConnection
      }, {
        headers: {
          'Authorization': `Bearer ${getAuthToken()}`
        }
      });
      
      if (response.data.status === 'success') {
        setResults({
          sql: response.data.sql,
          data: response.data.results || [],
          error: '',
          loading: false
        });
        showSuccess('Query executed successfully');
      } else {
        setResults({
          ...results,
          error: response.data.message || 'Failed to process query',
          loading: false
        });
        showError(response.data.message || 'Failed to process query');
      }
    } catch (error) {
      setResults({
        ...results,
        error: error.response?.data?.message || 'An error occurred',
        loading: false
      });
      showError(error.response?.data?.message || 'An error occurred');
    }
  };

  // Handle SQL generated from the QueryBuilder
  const handleQueryGenerated = async (sql) => {
    if (!selectedConnection) {
      setResults({
        ...results,
        error: 'Please select a database connection',
        loading: false
      });
      return;
    }
    
    // Show loading state
    setResults({
      ...results,
      loading: true,
      error: ''
    });
    
    try {
      // Execute the SQL generated by the query builder
      const response = await axios.post('/api/queries/execute', {
        sql: sql,
        connection_id: selectedConnection
      }, {
        headers: {
          'Authorization': `Bearer ${getAuthToken()}`
        }
      });
      
      if (response.data.status === 'success') {
        setResults({
          sql: sql,
          data: response.data.results || [],
          error: '',
          loading: false
        });
      } else {
        setResults({
          ...results,
          sql: sql,
          error: response.data.message || 'Failed to execute query',
          loading: false
        });
      }
    } catch (error) {
      setResults({
        ...results,
        sql: sql,
        error: error.response?.data?.message || 'An error occurred',
        loading: false
      });
    }
  };

  // Render data as a table
  const renderDataTable = () => {
    if (!results.data || results.data.length === 0) {
      return <Typography color="text.secondary">No results to display</Typography>;
    }
    
    // Get column headers from the first row
    const headers = Object.keys(results.data[0]);
    
    return (
      <Box sx={{ overflowX: 'auto', mt: 2 }}>
        <table style={{ width: '100%', borderCollapse: 'collapse', fontSize: '0.875rem' }}>
          <thead>
            <tr>
              {headers.map((header, index) => (
                <th key={index} style={{ 
                  border: '1px solid rgba(224, 224, 224, 1)', 
                  padding: '8px', 
                  backgroundColor: '#f5f5f5',
                  position: 'sticky',
                  top: 0
                }}>
                  {header}
                </th>
              ))}
            </tr>
          </thead>
          <tbody>
            {results.data.map((row, rowIndex) => (
              <tr key={rowIndex}>
                {headers.map((header, colIndex) => (
                  <td key={colIndex} style={{ border: '1px solid rgba(224, 224, 224, 1)', padding: '8px' }}>
                    {row[header] !== null ? String(row[header]) : 'NULL'}
                  </td>
                ))}
              </tr>
            ))}
          </tbody>
        </table>
      </Box>
    );
  };

  return (
    <Container maxWidth="xl" sx={{ mt: 4, mb: 4 }}>
      <Typography variant="h4" component="h1" gutterBottom>
        Database Query Interface
      </Typography>
      
      <Box sx={{ mb: 3 }}>
        <ConnectionSelector 
          selectedConnection={selectedConnection} 
          onChange={handleConnectionChange} 
        />
      </Box>
      
      <Paper sx={{ mb: 4 }}>
        <Box sx={{ borderBottom: 1, borderColor: 'divider' }}>
          <Tabs value={currentTab} onChange={handleTabChange} aria-label="query tabs">
            <Tab 
              icon={<LanguageIcon />} 
              iconPosition="start" 
              label="Natural Language" 
              id="query-tab-0" 
              aria-controls="query-tabpanel-0" 
            />
            <Tab 
              icon={<BuildIcon />} 
              iconPosition="start" 
              label="Visual Query Builder" 
              id="query-tab-1" 
              aria-controls="query-tabpanel-1" 
            />
          </Tabs>
        </Box>
        
        <TabPanel value={currentTab} index={0}>
          <Typography variant="body1" gutterBottom>
            Enter your query in natural language
            <Tooltip title="Example: 'Show me total ad spend for each platform in the last 30 days'">
              <HelpOutlineIcon fontSize="small" sx={{ ml: 1, verticalAlign: 'middle' }} />
            </Tooltip>
          </Typography>
          
          <Box component="form" onSubmit={handleQuerySubmit} sx={{ mt: 2 }}>
            <Grid container spacing={2} alignItems="flex-start">
              <Grid item xs={12} md={9}>
                <TextField
                  fullWidth
                  multiline
                  rows={3}
                  variant="outlined"
                  placeholder="Type your query here..."
                  value={queryText}
                  onChange={(e) => setQueryText(e.target.value)}
                  disabled={results.loading || !selectedConnection}
                />
              </Grid>
              <Grid item xs={12} md={3}>
                <Button
                  type="submit"
                  variant="contained"
                  color="primary"
                  fullWidth
                  size="large"
                  startIcon={<SendIcon />}
                  disabled={!queryText.trim() || results.loading || !selectedConnection}
                  sx={{ height: '100%' }}
                >
                  {results.loading ? <CircularProgress size={24} color="inherit" /> : 'Run Query'}
                </Button>
              </Grid>
            </Grid>
          </Box>
        </TabPanel>
        
        <TabPanel value={currentTab} index={1}>
          {selectedConnection ? (
            <QueryBuilder 
              connectionId={selectedConnection}
              onQueryGenerated={handleQueryGenerated}
            />
          ) : (
            <Box sx={{ textAlign: 'center', py: 4 }}>
              <StorageIcon sx={{ fontSize: 48, color: 'text.secondary', mb: 2 }} />
              <Typography variant="h6">Please select a database connection first</Typography>
            </Box>
          )}
        </TabPanel>
      </Paper>
      
      {(results.sql || results.error) && (
        <Paper elevation={3} sx={{ p: 3, mb: 4 }}>
          {results.error && (
            <Box sx={{ mb: 3, p: 2, bgcolor: 'error.light', borderRadius: 1 }}>
              <Typography color="error">{results.error}</Typography>
            </Box>
          )}
          
          {results.sql && (
            <>
              <Typography variant="h6" gutterBottom display="flex" alignItems="center">
                <CodeIcon sx={{ mr: 1 }} />
                Generated SQL
              </Typography>
              <Box sx={{ position: 'relative' }}>
                <SyntaxHighlighter 
                  language="sql" 
                  style={materialDark} 
                  customStyle={{ borderRadius: '4px' }}
                  showLineNumbers
                >
                  {results.sql}
                </SyntaxHighlighter>
              </Box>
            </>
          )}
        </Paper>
      )}
      
      {results.data && results.data.length > 0 && (
        <Paper elevation={3} sx={{ p: 3 }}>
          <Box sx={{ display: 'flex', justifyContent: 'space-between', alignItems: 'center', mb: 2 }}>
            <Typography variant="h6">
              Results
            </Typography>
            <Chip 
              label={`${results.data.length} row(s)`} 
              color="primary" 
              size="small" 
            />
          </Box>
          
          <Divider sx={{ mb: 2 }} />
          
          <Box sx={{ maxHeight: '400px', overflow: 'auto' }}>
            {renderDataTable()}
          </Box>
        </Paper>
      )}
    </Container>
  );
};

export default QueryPage;
